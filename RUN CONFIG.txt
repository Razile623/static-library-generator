RUN THE GENERATED LIBRARIES

  FOR STATIC (.a)
	gcc -o my_program main.c -L. -ltesting
	
	- my_program will generate the executables
	- main.c is the program 
	- -ltesting is the name of the library
		e.g. libtesting.a


	RUN THE PRORAM
	./my_program
		- run the executable


  FOR SHARED (.so)
	gcc -o my_program main.c -L. -ltesting -Wl,-rpath,.

	RUN THE PROGRAM
	./my_program




RUN BOTH STATIC AND SHARED LIBRARY AT THE SAME CODE
	when writing the program you add the prototype
	// Prototype for the shared library function
	e.g. extern void shared_function();

	COMPILE THE PROGRAM
		gcc -o my_program main.c -L. -ltesting -Wl,-rpath,. -ltesting -static


		-o my_program: Specifies the output executable name.
		main.c: Your source file.
		-L.: Specifies the directory to search for libraries (the current directory in this case).
		-ltesting: Links to both the shared and static libraries.
		-Wl,-rpath,.: Adds the current directory to the runtime library search path.
		-static: Forces static linking for the static library.

		./my_program


Convert the .so to dll
	gcc -shared -o libtesting.dll source.c
	gcc -o main main.c -L. -ltesting
	./main



FOR LINUX(UBUNTU)

Static(.a)
	gcc -o my_program main.c -L. -ltesting
	./my_program

Shared (.so)
	gcc -o my_program main.c -L. -ltesting
	export LD_LIBRARY_PATH=/media/sf_Project_Library/static_library_backend:$LD_LIBRARY_PATH
	./my_program


